{
    "swagger": "2.0",
    "info": {
        "title": "erdsea-api",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:5000",
    "paths": {
        "/accounts/{walletAddress}": {
            "get": {
                "description": "Retrieves an account by walletAddress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get account by account walletAddress",
                "parameters": [
                    {
                        "type": "string",
                        "description": "wallet address",
                        "name": "walletAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Sets an account settable information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Set account information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "wallet address",
                        "name": "walletAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "account info",
                        "name": "setAccountRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.SetAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{walletAddress}/collections/{offset}/{limit}": {
            "get": {
                "description": "Retrieves a list of collections. Unsorted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Gets collections for an account.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "wallet address",
                        "name": "walletAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Collection"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{walletAddress}/cover": {
            "post": {
                "description": "Expects base64 std encoding of the image representation. Returns empty string. Max size of byte array is 1MB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Set account cover image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "wallet address",
                        "name": "walletAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "base64 encoded image",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "primitive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{walletAddress}/profile": {
            "post": {
                "description": "Expects base64 std encoding of the image representation. Returns empty string. Max size of byte array is 512KB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Set account profile image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "wallet address",
                        "name": "walletAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "base64 encoded image",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "primitive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{walletAddress}/tokens/{offset}/{limit}": {
            "get": {
                "description": "Retrieves a list of tokens. Unsorted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Gets tokens for an account.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "wallet address",
                        "name": "walletAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.OwnedTokenDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/auth/access": {
            "post": {
                "description": "Creates an access credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Access credentials",
                "parameters": [
                    {
                        "description": "create credentials request",
                        "name": "tokenRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.createTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.tokenPayload"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refreshes the access credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh credentials",
                "parameters": [
                    {
                        "description": "refresh credentials request",
                        "name": "refreshRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.tokenPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.tokenPayload"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/create": {
            "post": {
                "description": "Creates a collection with given info.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Creates a collection.",
                "parameters": [
                    {
                        "description": "collection info",
                        "name": "createCollectionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CreateCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Collection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/list/{offset}/{limit}": {
            "get": {
                "description": "Retrieves a list of collections. Sorted by priority.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Gets collections.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Collection"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/rankings/{offset}/{limit}": {
            "get": {
                "description": "Acts as a leaderboard. Optionally provide ?sort[criteria]=volumeTraded\u0026sort[mode]=asc",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get collection rankings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RankingEntry"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collectionId}": {
            "get": {
                "description": "Retrieves a collection by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Gets collection by collection id.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.ExtendedCollectionDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Sets info for a collection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Set collection info.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "collection info",
                        "name": "updateCollectionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.UpdateCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Collection"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collectionId}/cover": {
            "post": {
                "description": "Expects base64 std encoding of the image representation. Returns empty string. Max size of byte array is 1MB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Set collection cover image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "base64 encoded image",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "primitive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collectionId}/mintInfo": {
            "get": {
                "description": "Retrieves max supply and total sold for a collection. Cached for 6 seconds.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Gets mint info about a collection.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.MintInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collectionId}/profile": {
            "post": {
                "description": "Expects base64 std encoding of the image representation. Returns empty string. Max size of byte array is 1MB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Set collection profile image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "base64 encoded image",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "primitive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collectionId}/tokens/{offset}/{limit}": {
            "get": {
                "description": "Retrieves the tokens of a collection. Unsorted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get collection tokens.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Token"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/deposits/{userAddress}": {
            "get": {
                "description": "Retrieves deposit amount for an address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deposits"
                ],
                "summary": "Gets the deposit (EGLD) located in the marketplace for an address.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "userAddress",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/egld_price": {
            "get": {
                "description": "Retrieves EGLD price in dollars. Price taken from Binance. Cached for 15 minutes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "egld_price"
                ],
                "summary": "Gets EGLD price in dollars.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/royalties/{userAddress}/amount": {
            "get": {
                "description": "Retrieves royalties amount for an address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "royalties"
                ],
                "summary": "Gets the royalties (EGLD) located in the marketplace for an address.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "userAddress",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/royalties/{userAddress}/last": {
            "get": {
                "description": "Gets last withdrawal epoch for a creator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "royalties"
                ],
                "summary": "Gets last withdrawal epoch (EGLD) for an address.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "userAddress",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/royalties/{userAddress}/remaining": {
            "get": {
                "description": "Gets remaining epochs until withdrawal epoch for a creator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "royalties"
                ],
                "summary": "Gets remaining epochs until withdraw royalties for an address.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "userAddress",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/search/accounts/{accountName}": {
            "get": {
                "description": "Searches for accounts by name. Cached for 20 minutes. Limit 5 elements.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search accounts by name.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search string",
                        "name": "accountName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Account"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/search/collections/{collectionName}": {
            "get": {
                "description": "Searches for collections by name. Cached for 20 minutes. Limit 5 elements.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search collections by name.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search string",
                        "name": "collectionName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Collection"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/search/{searchString}": {
            "get": {
                "description": "Searches for collections by name and accounts by name. Cached for 20 minutes. Limit 5 elements for each.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "General search by string.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search string",
                        "name": "searchString",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GeneralSearchResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tokens/available": {
            "get": {
                "description": "Get available tokens and some collection info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tokens"
                ],
                "summary": "Get available tokens",
                "parameters": [
                    {
                        "description": "request",
                        "name": "availableTokensRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.AvailableTokensRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.AvailableTokensResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{tokenId}/{nonce}": {
            "get": {
                "description": "Retrieves a token by tokenId and nonce",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tokens"
                ],
                "summary": "Get token by id and nonce",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.ExtendedTokenDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{tokenId}/{nonce}/bids/{offset}/{limit}": {
            "get": {
                "description": "Retrieves bids for a token (identified by tokenId and nonce)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tokens"
                ],
                "summary": "Get bids for token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.BidDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{tokenId}/{nonce}/offers/{offset}/{limit}": {
            "get": {
                "description": "Retrieves offers for a token (identified by tokenId and nonce)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tokens"
                ],
                "summary": "Get offers for token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.OfferDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transactions/account/{accountId}/{offset}/{limit}": {
            "get": {
                "description": "Retrieves transactions for an account. Unordered.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Gets transaction for an account.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transactions/collection/{collectionId}/{offset}/{limit}": {
            "get": {
                "description": "Retrieves transactions for a collection. Unordered.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Gets transaction for a collection.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transactions/list/{offset}/{limit}": {
            "get": {
                "description": "Retrieves transactions. Unordered.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Gets transaction list.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transactions/token/{tokenId}/{offset}/{limit}": {
            "get": {
                "description": "Retrieves transactions for an token. Unordered.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Gets transaction for an token.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/accept-offer/{userAddress}/{tokenId}/{nonce}/{offerorAddress}/{amount}": {
            "get": {
                "description": "Retrieves tx-template for accept offer transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Accepts offer for an NFT - tx template.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "offerorAddress",
                        "name": "offerorAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "amount",
                        "name": "amount",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/buy-nft/{userAddress}/{tokenId}/{nonce}/{price}": {
            "get": {
                "description": "Retrieves tx-template for NFT buy. Only account nonce and signature must be added afterwards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for NFT buy.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "price",
                        "name": "price",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/cancel-offer/{userAddress}/{tokenId}/{nonce}/{amount}": {
            "get": {
                "description": "Retrieves tx-template for cancel offer transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Cancels offer for an NFT - tx template.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "amount",
                        "name": "amount",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/change-owner/{userAddress}/{contractAddress}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for change owner of NFT contract.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract address",
                        "name": "contractAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/deploy-template/{userAddress}/{tokenId}/{royalties}/{tokenNameBase}/{imageExt}/{price}/{maxSupply}/{saleStart}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for deploy NFT template contract.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "royalties",
                        "name": "royalties",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tokenNameBase",
                        "name": "tokenNameBase",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "imageBase",
                        "name": "imageBase",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "imageExt",
                        "name": "imageExt",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "price",
                        "name": "price",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "maxSupply",
                        "name": "maxSupply",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "saleStart",
                        "name": "saleStart",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "metadataBase",
                        "name": "metadataBase",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/deposit/{userAddress}/{amount}": {
            "get": {
                "description": "Retrieves tx-template for deposit transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Deposit EGLD template.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "amount",
                        "name": "amount",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    }
                }
            }
        },
        "/tx-template/end-auction/{userAddress}/{tokenId}/{nonce}": {
            "get": {
                "description": "Retrieves tx-template for end auction transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "End auction for an NFT - tx template.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/issue-nft/{userAddress}/{tokenName}/{tokenTicker}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for issue NFT tokens.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token name",
                        "name": "tokenName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token ticker",
                        "name": "tokenTicker",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    }
                }
            }
        },
        "/tx-template/list-nft/{userAddress}/{tokenId}/{nonce}/{price}": {
            "get": {
                "description": "Retrieves tx-template for NFT list. Only account nonce and signature must be added afterwards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for NFT list.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "price",
                        "name": "price",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/make-offer/{userAddress}/{tokenId}/{nonce}/{amount}/{expire}": {
            "get": {
                "description": "Retrieves tx-template for make offer transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Make offer for an NFT - tx template.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "amount",
                        "name": "amount",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "expire",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/mint-tokens/{userAddress}/{tokenId}/{numberOfTokens}": {
            "get": {
                "description": "Retrieves tx-template for mint tokens. Only account nonce and signature must be added afterwards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for mint tokens.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "number of tokens",
                        "name": "numberOfTokens",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/place-bid/{userAddress}/{tokenId}/{nonce}/{payment}/{bidAmount}": {
            "get": {
                "description": "Retrieves tx-template for place bid transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Start auction for an NFT - tx template.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "payment",
                        "name": "payment",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "bidAmount",
                        "name": "bidAmount",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/request-withdraw/{userAddress}/{contractAddress}": {
            "get": {
                "description": "The destination will be the Minter Address. Minter will request withdrawal from Marketplace.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for request withdraw through Minter.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract address",
                        "name": "contractAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/set-roles/{userAddress}/{tokenId}/{contractAddress}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for change set special roles for NFT contract.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token name",
                        "name": "tokenName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token ticker",
                        "name": "tokenTicker",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/start-auction/{userAddress}/{tokenId}/{nonce}/{minBid}/{startTime}/{deadline}": {
            "get": {
                "description": "Retrieves tx-template for start auction transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Start auction for an NFT - tx template.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "minBid",
                        "name": "minBid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "startTime",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "deadline",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/withdraw-creator-royalties/{userAddress}": {
            "get": {
                "description": "Retrieves tx-template for withdraw creator royalties transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Withdraw Creator Royalties EGLD template.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    }
                }
            }
        },
        "/tx-template/withdraw-minter/{userAddress}/{contractAddress}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for withdraw from Minter SC.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract address",
                        "name": "contractAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    }
                }
            }
        },
        "/tx-template/withdraw-nft/{userAddress}/{tokenId}/{nonce}": {
            "get": {
                "description": "Retrieves tx-template for NFT withdraw. Only account nonce and signature must be added afterwards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for NFT withdraw.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/withdraw/{userAddress}/{amount}": {
            "get": {
                "description": "Retrieves tx-template for withdraw transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Withdraw EGLD template.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.ApiResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string"
                }
            }
        },
        "dtos.AttributeStat": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "trait_type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "dtos.BidDto": {
            "type": "object",
            "properties": {
                "bidAmountNominal": {
                    "type": "number"
                },
                "bidAmountString": {
                    "type": "string"
                },
                "bidderAddress": {
                    "type": "string"
                },
                "bidderName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "integer"
                },
                "tokenId": {
                    "type": "integer"
                },
                "txHash": {
                    "type": "string"
                }
            }
        },
        "dtos.CollectionStatistics": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.AttributeStat"
                    }
                },
                "floorPrice": {
                    "type": "number"
                },
                "itemsTotal": {
                    "type": "integer"
                },
                "ownersTotal": {
                    "type": "integer"
                },
                "volumeTraded": {
                    "type": "number"
                }
            }
        },
        "dtos.ExtendedCollectionDto": {
            "type": "object",
            "properties": {
                "collection": {
                    "$ref": "#/definitions/entities.Collection"
                },
                "creatorName": {
                    "type": "string"
                },
                "creatorWalletAddress": {
                    "type": "string"
                },
                "statistics": {
                    "$ref": "#/definitions/dtos.CollectionStatistics"
                }
            }
        },
        "dtos.ExtendedTokenDto": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "auctionDeadline": {
                    "type": "integer"
                },
                "auctionStartTime": {
                    "type": "integer"
                },
                "collectionId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "integer"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imageLink": {
                    "type": "string"
                },
                "lastBuyPriceNominal": {
                    "type": "number"
                },
                "metadataLink": {
                    "type": "string"
                },
                "nonce": {
                    "type": "integer"
                },
                "ownerId": {
                    "type": "integer"
                },
                "ownerName": {
                    "type": "string"
                },
                "ownerWalletAddress": {
                    "type": "string"
                },
                "priceNominal": {
                    "type": "number"
                },
                "priceString": {
                    "type": "string"
                },
                "royaltiesPercent": {
                    "type": "number"
                },
                "state": {
                    "type": "string"
                },
                "tokenId": {
                    "type": "string"
                },
                "tokenName": {
                    "type": "string"
                }
            }
        },
        "dtos.OfferDto": {
            "type": "object",
            "properties": {
                "amountNominal": {
                    "type": "number"
                },
                "amountString": {
                    "type": "string"
                },
                "expire": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "offerorAddress": {
                    "type": "string"
                },
                "offerorName": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "tokenId": {
                    "type": "integer"
                },
                "txHash": {
                    "type": "string"
                }
            }
        },
        "dtos.OwnedTokenDto": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "auctionDeadline": {
                    "type": "integer"
                },
                "auctionStartTime": {
                    "type": "integer"
                },
                "collectionFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "collectionId": {
                    "type": "integer"
                },
                "collectionName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "integer"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imageLink": {
                    "type": "string"
                },
                "lastBuyPriceNominal": {
                    "type": "number"
                },
                "metadataLink": {
                    "type": "string"
                },
                "nonce": {
                    "type": "integer"
                },
                "ownerId": {
                    "type": "integer"
                },
                "priceNominal": {
                    "type": "number"
                },
                "priceString": {
                    "type": "string"
                },
                "royaltiesPercent": {
                    "type": "number"
                },
                "state": {
                    "type": "string"
                },
                "tokenId": {
                    "type": "string"
                },
                "tokenName": {
                    "type": "string"
                }
            }
        },
        "entities.Account": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "coverImageLink": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "instagramLink": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "profileImageLink": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "entities.Collection": {
            "type": "object",
            "properties": {
                "contractAddress": {
                    "type": "string"
                },
                "coverImageLink": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "integer"
                },
                "creatorId": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "discordLink": {
                    "type": "string"
                },
                "flags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "instagramLink": {
                    "type": "string"
                },
                "mintPricePerTokenNominal": {
                    "type": "number"
                },
                "mintPricePerTokenString": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "profileImageLink": {
                    "type": "string"
                },
                "telegramLink": {
                    "type": "string"
                },
                "tokenId": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "entities.Token": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "auctionDeadline": {
                    "type": "integer"
                },
                "auctionStartTime": {
                    "type": "integer"
                },
                "collectionId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "integer"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imageLink": {
                    "type": "string"
                },
                "lastBuyPriceNominal": {
                    "type": "number"
                },
                "metadataLink": {
                    "type": "string"
                },
                "nonce": {
                    "type": "integer"
                },
                "ownerId": {
                    "type": "integer"
                },
                "priceNominal": {
                    "type": "number"
                },
                "priceString": {
                    "type": "string"
                },
                "royaltiesPercent": {
                    "type": "number"
                },
                "state": {
                    "type": "string"
                },
                "tokenId": {
                    "type": "string"
                },
                "tokenName": {
                    "type": "string"
                }
            }
        },
        "entities.Transaction": {
            "type": "object",
            "properties": {
                "buyerId": {
                    "type": "integer"
                },
                "collectionId": {
                    "type": "integer"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "priceNominal": {
                    "type": "number"
                },
                "sellerId": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "integer"
                },
                "tokenId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "formatter.Transaction": {
            "type": "object",
            "properties": {
                "chainID": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "gasLimit": {
                    "type": "integer"
                },
                "gasPrice": {
                    "type": "integer"
                },
                "nonce": {
                    "type": "integer"
                },
                "options": {
                    "type": "integer"
                },
                "receiver": {
                    "type": "string"
                },
                "sender": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "handlers.GeneralSearchResponse": {
            "type": "object",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Account"
                    }
                },
                "collections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Collection"
                    }
                }
            }
        },
        "handlers.RankingEntry": {
            "type": "object",
            "properties": {
                "CollectionId": {
                    "type": "string"
                },
                "CollectionName": {
                    "type": "string"
                },
                "floorPrice": {
                    "type": "number"
                },
                "itemsTotal": {
                    "type": "integer"
                },
                "ownersTotal": {
                    "type": "integer"
                },
                "volumeTraded": {
                    "type": "number"
                }
            }
        },
        "handlers.createTokenRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                }
            }
        },
        "handlers.tokenPayload": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "services.AvailableToken": {
            "type": "object",
            "properties": {
                "collection": {
                    "type": "object",
                    "properties": {
                        "available": {
                            "type": "boolean"
                        },
                        "id": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                },
                "token": {
                    "type": "object",
                    "properties": {
                        "available": {
                            "type": "boolean"
                        },
                        "id": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "nonce": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "services.AvailableTokensRequest": {
            "type": "object",
            "properties": {
                "tokens": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "services.AvailableTokensResponse": {
            "type": "object",
            "properties": {
                "tokens": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/services.AvailableToken"
                    }
                }
            }
        },
        "services.CreateCollectionRequest": {
            "type": "object",
            "properties": {
                "collectionName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "discordLink": {
                    "type": "string"
                },
                "flags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "instagramLink": {
                    "type": "string"
                },
                "telegramLink": {
                    "type": "string"
                },
                "tokenId": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "userAddress": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "services.MintInfo": {
            "type": "object",
            "properties": {
                "maxSupply": {
                    "type": "integer"
                },
                "totalSold": {
                    "type": "integer"
                }
            }
        },
        "services.SetAccountRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "instagramLink": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "services.UpdateCollectionRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "discordLink": {
                    "type": "string"
                },
                "flags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "instagramLink": {
                    "type": "string"
                },
                "telegramLink": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        }
    }
}