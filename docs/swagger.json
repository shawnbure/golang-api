{
    "swagger": "2.0",
    "info": {
        "title": "erdsea-api",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:5000",
    "paths": {
        "/accounts/find/{accountAddress}": {
            "get": {
                "description": "Retrieves an account by address. Useful for login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get account by address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "account address",
                        "name": "accountAddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{accountId}": {
            "get": {
                "description": "Retrieves an account by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get account by account id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Sets an account settable information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Set account information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "account info",
                        "name": "setAccountRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.SetAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{accountId}/cover": {
            "get": {
                "description": "Retrieves an account cover image. It will be sent as base64 encoding (sdt, raw) of its byte representation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get account cover image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Expects base64 encoding (sdt, raw) of the image representation. Returns empty string. Max size of byte array is 1MB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Set account cover image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "base64 encoded image",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "primitive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{accountId}/profile": {
            "get": {
                "description": "Retrieves an account profile image. It will be sent as base64 encoding (sdt, raw) of its byte representation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get account profile image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Expects base64 encoding (sdt, raw) of the image representation. Returns empty string. Max size of byte array is 512KB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Set account profile image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "base64 encoded image",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "primitive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{accountId}/tokens/{offset}/{limit}": {
            "get": {
                "description": "Retrieves a list of tokens. Unsorted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Gets tokens for an account.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Token"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{address}": {
            "post": {
                "description": "Creates an account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Creates an account",
                "parameters": [
                    {
                        "description": "account info",
                        "name": "createAccountRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CreateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/auth/access": {
            "post": {
                "description": "Creates an access credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Access credentials",
                "parameters": [
                    {
                        "description": "create credentials request",
                        "name": "tokenRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.createTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.tokenPayload"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refreshes the access credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh credentials",
                "parameters": [
                    {
                        "description": "refresh credentials request",
                        "name": "refreshRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.tokenPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.tokenPayload"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/create": {
            "post": {
                "description": "Creates a collection with given info.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Creates a collection.",
                "parameters": [
                    {
                        "description": "collection info",
                        "name": "createCollectionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CreateCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Collection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/list/{offset}/{limit}": {
            "get": {
                "description": "Retrieves a list of collections. Unsorted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Gets collections.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Collection"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collectionId}": {
            "get": {
                "description": "Retrieves a collection by its name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Gets collection by name.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Collection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Sets info for a collection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Set collection info.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "collection info",
                        "name": "updateCollectionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.UpdateCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Collection"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collectionId}/cover": {
            "get": {
                "description": "Retrieves a collection cover image. It will be sent as base64 encoding (sdt, raw) of its byte representation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get collection cover image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Expects base64 encoding (sdt, raw) of the image representation. Returns empty string. Max size of byte array is 1MB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Set collection cover image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "base64 encoded image",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "primitive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collectionId}/profile": {
            "get": {
                "description": "Retrieves a collection cover image. It will be sent as base64 encoding (sdt, raw) of its byte representation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get collection profile image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Expects base64 encoding (sdt, raw) of the image representation. Returns empty string. Max size of byte array is 1MB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Set collection profile image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "base64 encoded image",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "primitive"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collectionId}/statistics": {
            "post": {
                "description": "Gets statistics for a collection. It will be cached for 15 minutes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Gets collection statistics.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.CollectionStatistics"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/collections/{collectionId}/tokens/{offset}/{limit}": {
            "get": {
                "description": "Retrieves the tokens of a collection. Unsorted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get collection tokens.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Token"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/egld_price": {
            "get": {
                "description": "Retrieves EGLD price in dollars. Price taken from Binance. Cached for 15 minutes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "egld_price"
                ],
                "summary": "Gets EGLD price in dollars.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/search/accounts/{accountName}": {
            "get": {
                "description": "Searches for accounts by name. Cached for 20 minutes. Limit 5 elements.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search accounts by name.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search string",
                        "name": "accountName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Account"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/search/collections/{collectionName}": {
            "get": {
                "description": "Searches for collections by name. Cached for 20 minutes. Limit 5 elements.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search collections by name.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search string",
                        "name": "collectionName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Collection"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/search/{searchString}": {
            "get": {
                "description": "Searches for collections by name and accounts by name. Cached for 20 minutes. Limit 5 elements for each.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "General search by string.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search string",
                        "name": "searchString",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GeneralSearchResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{tokenId}/{nonce}": {
            "get": {
                "description": "Retrieves a token by tokenId and nonce",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tokens"
                ],
                "summary": "Get token by id and nonce",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Token"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transactions/account/{accountId}/{offset}/{limit}": {
            "get": {
                "description": "Retrieves transactions for an account. Unordered.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Gets transaction for an account.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transactions/collection/{collectionId}/{offset}/{limit}": {
            "get": {
                "description": "Retrieves transactions for a collection. Unordered.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Gets transaction for a collection.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "collection id",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transactions/list/{offset}/{limit}": {
            "get": {
                "description": "Retrieves transactions. Unordered.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Gets transaction list.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/transactions/token/{tokenId}/{offset}/{limit}": {
            "get": {
                "description": "Retrieves transactions for an token. Unordered.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Gets transaction for an token.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/buy-nft/{userAddress}/{tokenId}/{nonce}/{price}": {
            "get": {
                "description": "Retrieves tx-template for NFT buy. Only account nonce and signature must be added afterwards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for NFT buy.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "price",
                        "name": "price",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/list-nft/{userAddress}/{tokenId}/{nonce}/{price}": {
            "get": {
                "description": "Retrieves tx-template for NFT list. Only account nonce and signature must be added afterwards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for NFT list.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "price",
                        "name": "price",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        },
        "/tx-template/withdraw-nft/{userAddress}/{tokenId}/{nonce}": {
            "get": {
                "description": "Retrieves tx-template for NFT withdraw. Only account nonce and signature must be added afterwards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tx-template"
                ],
                "summary": "Gets tx-template for NFT withdraw.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user address",
                        "name": "userAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "nonce",
                        "name": "nonce",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatter.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ApiResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.ApiResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string"
                }
            }
        },
        "dtos.CollectionStatistics": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        }
                    }
                },
                "floorPrice": {
                    "type": "number"
                },
                "itemsTotal": {
                    "type": "integer"
                },
                "ownersTotal": {
                    "type": "integer"
                },
                "volumeTraded": {
                    "type": "number"
                }
            }
        },
        "entities.Account": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "instagramLink": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "entities.Collection": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "integer"
                },
                "creatorID": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "discordLink": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "instagramLink": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "telegramLink": {
                    "type": "string"
                },
                "tokenID": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "entities.Token": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "collectionID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "integer"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imageLink": {
                    "type": "string"
                },
                "listed": {
                    "type": "boolean"
                },
                "metadataLink": {
                    "type": "string"
                },
                "nonce": {
                    "type": "integer"
                },
                "ownerId": {
                    "type": "integer"
                },
                "priceNominal": {
                    "type": "number"
                },
                "royaltiesPercent": {
                    "type": "number"
                },
                "tokenID": {
                    "type": "string"
                },
                "tokenName": {
                    "type": "string"
                }
            }
        },
        "entities.Transaction": {
            "type": "object",
            "properties": {
                "buyerID": {
                    "type": "integer"
                },
                "collectionID": {
                    "type": "integer"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "priceNominal": {
                    "type": "number"
                },
                "sellerID": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "integer"
                },
                "tokenID": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "formatter.Transaction": {
            "type": "object",
            "properties": {
                "chainID": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "gasLimit": {
                    "type": "integer"
                },
                "gasPrice": {
                    "type": "integer"
                },
                "nonce": {
                    "type": "integer"
                },
                "options": {
                    "type": "integer"
                },
                "receiver": {
                    "type": "string"
                },
                "sender": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "handlers.GeneralSearchResponse": {
            "type": "object",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Account"
                    }
                },
                "collections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Collection"
                    }
                }
            }
        },
        "handlers.createTokenRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                }
            }
        },
        "handlers.tokenPayload": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "services.CreateAccountRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "instagramLink": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "services.CreateCollectionRequest": {
            "type": "object",
            "properties": {
                "collectionName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "discordLink": {
                    "type": "string"
                },
                "instagramLink": {
                    "type": "string"
                },
                "telegramLink": {
                    "type": "string"
                },
                "tokenId": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "userAddress": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "services.SetAccountRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "instagramLink": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "services.UpdateCollectionRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "discordLink": {
                    "type": "string"
                },
                "instagramLink": {
                    "type": "string"
                },
                "telegramLink": {
                    "type": "string"
                },
                "twitterLink": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        }
    }
}