definitions:
  dtos.ApiResponse:
    properties:
      data: {}
      error:
        type: string
    type: object
  dtos.AttributeStat:
    properties:
      total:
        type: integer
      trait_type:
        type: string
      value: {}
    type: object
  dtos.BidDto:
    properties:
      bidAmountNominal:
        type: number
      bidAmountString:
        type: string
      bidderAddress:
        type: string
      bidderName:
        type: string
      id:
        type: integer
      timestamp:
        type: integer
      tokenId:
        type: integer
      txHash:
        type: string
    type: object
  dtos.CollectionStatistics:
    properties:
      attributes:
        items:
          $ref: '#/definitions/dtos.AttributeStat'
        type: array
      floorPrice:
        type: number
      itemsTotal:
        type: integer
      ownersTotal:
        type: integer
      volumeTraded:
        type: number
    type: object
  dtos.ExtendedCollectionDto:
    properties:
      collection:
        $ref: '#/definitions/entities.Collection'
      creatorName:
        type: string
      creatorWalletAddress:
        type: string
      statistics:
        $ref: '#/definitions/dtos.CollectionStatistics'
    type: object
  dtos.ExtendedTokenDto:
    properties:
      attributes:
        items:
          type: integer
        type: array
      auctionDeadline:
        type: integer
      auctionStartTime:
        type: integer
      collectionId:
        type: integer
      createdAt:
        type: integer
      hash:
        type: string
      id:
        type: integer
      imageLink:
        type: string
      lastBuyPriceNominal:
        type: number
      metadataLink:
        type: string
      nonce:
        type: integer
      ownerId:
        type: integer
      ownerName:
        type: string
      ownerWalletAddress:
        type: string
      priceNominal:
        type: number
      priceString:
        type: string
      royaltiesPercent:
        type: number
      state:
        type: string
      tokenId:
        type: string
      tokenName:
        type: string
    type: object
  dtos.OfferDto:
    properties:
      amountNominal:
        type: number
      amountString:
        type: string
      expire:
        type: integer
      id:
        type: integer
      offerorAddress:
        type: string
      offerorName:
        type: string
      timestamp:
        type: integer
      tokenId:
        type: integer
      txHash:
        type: string
    type: object
  dtos.OwnedTokenDto:
    properties:
      attributes:
        items:
          type: integer
        type: array
      auctionDeadline:
        type: integer
      auctionStartTime:
        type: integer
      collectionFlags:
        items:
          type: integer
        type: array
      collectionId:
        type: integer
      collectionName:
        type: string
      createdAt:
        type: integer
      hash:
        type: string
      id:
        type: integer
      imageLink:
        type: string
      lastBuyPriceNominal:
        type: number
      metadataLink:
        type: string
      nonce:
        type: integer
      ownerId:
        type: integer
      priceNominal:
        type: number
      priceString:
        type: string
      royaltiesPercent:
        type: number
      state:
        type: string
      tokenId:
        type: string
      tokenName:
        type: string
    type: object
  entities.Account:
    properties:
      address:
        type: string
      coverImageLink:
        type: string
      createdAt:
        type: integer
      description:
        type: string
      id:
        type: integer
      instagramLink:
        type: string
      name:
        type: string
      profileImageLink:
        type: string
      twitterLink:
        type: string
      website:
        type: string
    type: object
  entities.Collection:
    properties:
      contractAddress:
        type: string
      coverImageLink:
        type: string
      createdAt:
        type: integer
      creatorId:
        type: integer
      description:
        type: string
      discordLink:
        type: string
      flags:
        items:
          type: integer
        type: array
      id:
        type: integer
      instagramLink:
        type: string
      mintPricePerTokenNominal:
        type: number
      mintPricePerTokenString:
        type: string
      name:
        type: string
      priority:
        type: integer
      profileImageLink:
        type: string
      telegramLink:
        type: string
      tokenId:
        type: string
      twitterLink:
        type: string
      website:
        type: string
    type: object
  entities.Token:
    properties:
      attributes:
        items:
          type: integer
        type: array
      auctionDeadline:
        type: integer
      auctionStartTime:
        type: integer
      collectionId:
        type: integer
      createdAt:
        type: integer
      hash:
        type: string
      id:
        type: integer
      imageLink:
        type: string
      lastBuyPriceNominal:
        type: number
      metadataLink:
        type: string
      nonce:
        type: integer
      ownerId:
        type: integer
      priceNominal:
        type: number
      priceString:
        type: string
      royaltiesPercent:
        type: number
      state:
        type: string
      tokenId:
        type: string
      tokenName:
        type: string
    type: object
  entities.Transaction:
    properties:
      buyerId:
        type: integer
      collectionId:
        type: integer
      hash:
        type: string
      id:
        type: integer
      priceNominal:
        type: number
      sellerId:
        type: integer
      timestamp:
        type: integer
      tokenId:
        type: integer
      type:
        type: string
    type: object
  formatter.Transaction:
    properties:
      chainID:
        type: string
      data:
        type: string
      gasLimit:
        type: integer
      gasPrice:
        type: integer
      nonce:
        type: integer
      options:
        type: integer
      receiver:
        type: string
      sender:
        type: string
      signature:
        type: string
      value:
        type: string
      version:
        type: integer
    type: object
  handlers.GeneralSearchResponse:
    properties:
      accounts:
        items:
          $ref: '#/definitions/entities.Account'
        type: array
      collections:
        items:
          $ref: '#/definitions/entities.Collection'
        type: array
    type: object
  handlers.RankingEntry:
    properties:
      CollectionId:
        type: string
      CollectionName:
        type: string
      floorPrice:
        type: number
      itemsTotal:
        type: integer
      ownersTotal:
        type: integer
      volumeTraded:
        type: number
    type: object
  handlers.createTokenRequest:
    properties:
      address:
        type: string
      message:
        type: string
      signature:
        type: string
    type: object
  handlers.tokenPayload:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  services.AvailableToken:
    properties:
      collection:
        properties:
          available:
            type: boolean
          id:
            type: string
          name:
            type: string
        type: object
      token:
        properties:
          available:
            type: boolean
          id:
            type: string
          name:
            type: string
          nonce:
            type: integer
        type: object
    type: object
  services.AvailableTokensRequest:
    properties:
      tokens:
        items:
          type: string
        type: array
    type: object
  services.AvailableTokensResponse:
    properties:
      tokens:
        additionalProperties:
          $ref: '#/definitions/services.AvailableToken'
        type: object
    type: object
  services.CreateCollectionRequest:
    properties:
      collectionName:
        type: string
      description:
        type: string
      discordLink:
        type: string
      flags:
        items:
          type: string
        type: array
      instagramLink:
        type: string
      telegramLink:
        type: string
      tokenId:
        type: string
      twitterLink:
        type: string
      userAddress:
        type: string
      website:
        type: string
    type: object
  services.MintInfo:
    properties:
      maxSupply:
        type: integer
      totalSold:
        type: integer
    type: object
  services.SetAccountRequest:
    properties:
      description:
        type: string
      instagramLink:
        type: string
      name:
        type: string
      twitterLink:
        type: string
      website:
        type: string
    type: object
  services.UpdateCollectionRequest:
    properties:
      description:
        type: string
      discordLink:
        type: string
      flags:
        items:
          type: string
        type: array
      instagramLink:
        type: string
      telegramLink:
        type: string
      twitterLink:
        type: string
      website:
        type: string
    type: object
host: localhost:5000
info:
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: erdsea-api
  version: "1.0"
paths:
  /accounts/{walletAddress}:
    get:
      consumes:
      - application/json
      description: Retrieves an account by walletAddress
      parameters:
      - description: wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Get account by account walletAddress
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: Sets an account settable information
      parameters:
      - description: wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      - description: account info
        in: body
        name: setAccountRequest
        required: true
        schema:
          $ref: '#/definitions/services.SetAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Set account information
      tags:
      - accounts
  /accounts/{walletAddress}/collections/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Retrieves a list of collections. Unsorted.
      parameters:
      - description: wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Collection'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets collections for an account.
      tags:
      - accounts
  /accounts/{walletAddress}/cover:
    post:
      consumes:
      - application/json
      description: Expects base64 std encoding of the image representation. Returns
        empty string. Max size of byte array is 1MB.
      parameters:
      - description: wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      - description: base64 encoded image
        in: body
        name: image
        required: true
        schema:
          type: primitive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Set account cover image
      tags:
      - accounts
  /accounts/{walletAddress}/profile:
    post:
      consumes:
      - application/json
      description: Expects base64 std encoding of the image representation. Returns
        empty string. Max size of byte array is 512KB.
      parameters:
      - description: wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      - description: base64 encoded image
        in: body
        name: image
        required: true
        schema:
          type: primitive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Set account profile image
      tags:
      - accounts
  /accounts/{walletAddress}/tokens/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Retrieves a list of tokens. Unsorted.
      parameters:
      - description: wallet address
        in: path
        name: walletAddress
        required: true
        type: string
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.OwnedTokenDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets tokens for an account.
      tags:
      - accounts
  /auth/access:
    post:
      consumes:
      - application/json
      description: Creates an access credentials
      parameters:
      - description: create credentials request
        in: body
        name: tokenRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.createTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.tokenPayload'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Access credentials
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the access credentials
      parameters:
      - description: refresh credentials request
        in: body
        name: refreshRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.tokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.tokenPayload'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Refresh credentials
      tags:
      - auth
  /collections/{collectionId}:
    get:
      consumes:
      - application/json
      description: Retrieves a collection by id.
      parameters:
      - description: collection id
        in: path
        name: collectionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ExtendedCollectionDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets collection by collection id.
      tags:
      - collections
    post:
      consumes:
      - application/json
      description: Sets info for a collection.
      parameters:
      - description: collection id
        in: path
        name: collectionId
        required: true
        type: string
      - description: collection info
        in: body
        name: updateCollectionRequest
        required: true
        schema:
          $ref: '#/definitions/services.UpdateCollectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Collection'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Set collection info.
      tags:
      - collections
  /collections/{collectionId}/cover:
    post:
      consumes:
      - application/json
      description: Expects base64 std encoding of the image representation. Returns
        empty string. Max size of byte array is 1MB.
      parameters:
      - description: collection id
        in: path
        name: collectionId
        required: true
        type: string
      - description: base64 encoded image
        in: body
        name: image
        required: true
        schema:
          type: primitive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Set collection cover image
      tags:
      - collections
  /collections/{collectionId}/mintInfo:
    get:
      consumes:
      - application/json
      description: Retrieves max supply and total sold for a collection. Cached for
        6 seconds.
      parameters:
      - description: collection id
        in: path
        name: collectionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.MintInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets mint info about a collection.
      tags:
      - collections
  /collections/{collectionId}/profile:
    post:
      consumes:
      - application/json
      description: Expects base64 std encoding of the image representation. Returns
        empty string. Max size of byte array is 1MB.
      parameters:
      - description: collection id
        in: path
        name: collectionId
        required: true
        type: string
      - description: base64 encoded image
        in: body
        name: image
        required: true
        schema:
          type: primitive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Set collection profile image
      tags:
      - collections
  /collections/{collectionId}/tokens/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Retrieves the tokens of a collection. Unsorted.
      parameters:
      - description: collection id
        in: path
        name: collectionId
        required: true
        type: string
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Token'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Get collection tokens.
      tags:
      - collections
  /collections/create:
    post:
      consumes:
      - application/json
      description: Creates a collection with given info.
      parameters:
      - description: collection info
        in: body
        name: createCollectionRequest
        required: true
        schema:
          $ref: '#/definitions/services.CreateCollectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Creates a collection.
      tags:
      - collections
  /collections/list/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Retrieves a list of collections. Sorted by priority.
      parameters:
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Collection'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets collections.
      tags:
      - collections
  /collections/rankings/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Acts as a leaderboard. Optionally provide ?sort[criteria]=volumeTraded&sort[mode]=asc
      parameters:
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RankingEntry'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Get collection rankings
      tags:
      - collections
  /deposits/{userAddress}:
    get:
      consumes:
      - application/json
      description: Retrieves deposit amount for an address.
      parameters:
      - description: userAddress
        in: path
        name: userAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets the deposit (EGLD) located in the marketplace for an address.
      tags:
      - deposits
  /egld_price:
    get:
      consumes:
      - application/json
      description: Retrieves EGLD price in dollars. Price taken from Binance. Cached
        for 15 minutes.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets EGLD price in dollars.
      tags:
      - egld_price
  /royalties/{userAddress}/amount:
    get:
      consumes:
      - application/json
      description: Retrieves royalties amount for an address.
      parameters:
      - description: userAddress
        in: path
        name: userAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets the royalties (EGLD) located in the marketplace for an address.
      tags:
      - royalties
  /royalties/{userAddress}/last:
    get:
      consumes:
      - application/json
      description: Gets last withdrawal epoch for a creator.
      parameters:
      - description: userAddress
        in: path
        name: userAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets last withdrawal epoch (EGLD) for an address.
      tags:
      - royalties
  /royalties/{userAddress}/remaining:
    get:
      consumes:
      - application/json
      description: Gets remaining epochs until withdrawal epoch for a creator.
      parameters:
      - description: userAddress
        in: path
        name: userAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets remaining epochs until withdraw royalties for an address.
      tags:
      - royalties
  /search/{searchString}:
    get:
      consumes:
      - application/json
      description: Searches for collections by name and accounts by name. Cached for
        20 minutes. Limit 5 elements for each.
      parameters:
      - description: search string
        in: path
        name: searchString
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GeneralSearchResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: General search by string.
      tags:
      - search
  /search/accounts/{accountName}:
    get:
      consumes:
      - application/json
      description: Searches for accounts by name. Cached for 20 minutes. Limit 5 elements.
      parameters:
      - description: search string
        in: path
        name: accountName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Account'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Search accounts by name.
      tags:
      - search
  /search/collections/{collectionName}:
    get:
      consumes:
      - application/json
      description: Searches for collections by name. Cached for 20 minutes. Limit
        5 elements.
      parameters:
      - description: search string
        in: path
        name: collectionName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Collection'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Search collections by name.
      tags:
      - search
  /tokens/{tokenId}/{nonce}:
    get:
      consumes:
      - application/json
      description: Retrieves a token by tokenId and nonce
      parameters:
      - description: token id
        in: path
        name: tokenId
        required: true
        type: string
      - description: token nonce
        in: path
        name: nonce
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ExtendedTokenDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Get token by id and nonce
      tags:
      - tokens
  /tokens/{tokenId}/{nonce}/bids/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Retrieves bids for a token (identified by tokenId and nonce)
      parameters:
      - description: token id
        in: path
        name: tokenId
        required: true
        type: string
      - description: token nonce
        in: path
        name: nonce
        required: true
        type: integer
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.BidDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Get bids for token
      tags:
      - tokens
  /tokens/{tokenId}/{nonce}/offers/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Retrieves offers for a token (identified by tokenId and nonce)
      parameters:
      - description: token id
        in: path
        name: tokenId
        required: true
        type: string
      - description: token nonce
        in: path
        name: nonce
        required: true
        type: integer
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.OfferDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Get offers for token
      tags:
      - tokens
  /tokens/{tokenId}/{nonce}/refresh:
    post:
      consumes:
      - application/json
      description: Returns attributes directly stored inside token (not OS format).
        Check then before and after. If modified, reload the page maybe?
      parameters:
      - description: token id
        in: path
        name: tokenId
        required: true
        type: string
      - description: token nonce
        in: path
        name: nonce
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Tries to refresh token metadata link and attributes.
      tags:
      - tokens
  /tokens/available:
    get:
      consumes:
      - application/json
      description: Get available tokens and some collection info
      parameters:
      - description: request
        in: body
        name: availableTokensRequest
        required: true
        schema:
          $ref: '#/definitions/services.AvailableTokensRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AvailableTokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Get available tokens
      tags:
      - tokens
  /tokens/metadata/relay:
    get:
      consumes:
      - application/json
      description: Make request with ?url=link
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets metadata link response. Cached.
      tags:
      - tokens
  /transactions/account/{userAddress}/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Retrieves transactions for an account. Unordered.
      parameters:
      - description: user wallet address
        in: path
        name: userAddress
        required: true
        type: string
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets transaction for an account.
      tags:
      - transactions
  /transactions/collection/{collectionId}/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Retrieves transactions for a collection. Unordered.
      parameters:
      - description: collection id
        in: path
        name: collectionId
        required: true
        type: string
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets transaction for a collection.
      tags:
      - transactions
  /transactions/list/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Retrieves transactions. Unordered.
      parameters:
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets transaction list.
      tags:
      - transactions
  /transactions/token/{tokenId}/{nonce}/{offset}/{limit}:
    get:
      consumes:
      - application/json
      description: Retrieves transactions for an token. Unordered.
      parameters:
      - description: token id
        in: path
        name: tokenId
        required: true
        type: string
      - description: nonce
        in: path
        name: nonce
        required: true
        type: integer
      - description: offset
        in: path
        name: offset
        required: true
        type: integer
      - description: limit
        in: path
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets transaction for an token.
      tags:
      - transactions
  /tx-template/accept-offer/{userAddress}/{tokenId}/{nonce}/{offerorAddress}/{amount}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for accept offer transaction.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: token id
        in: path
        name: tokenId
        required: true
        type: integer
      - description: nonce
        in: path
        name: nonce
        required: true
        type: integer
      - description: offerorAddress
        in: path
        name: offerorAddress
        required: true
        type: string
      - description: amount
        in: path
        name: amount
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Accepts offer for an NFT - tx template.
      tags:
      - tx-template
  /tx-template/buy-nft/{userAddress}/{tokenId}/{nonce}/{price}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for NFT buy. Only account nonce and signature
        must be added afterwards.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: token id
        in: path
        name: tokenId
        required: true
        type: integer
      - description: nonce
        in: path
        name: nonce
        required: true
        type: integer
      - description: price
        in: path
        name: price
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets tx-template for NFT buy.
      tags:
      - tx-template
  /tx-template/cancel-offer/{userAddress}/{tokenId}/{nonce}/{amount}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for cancel offer transaction.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: token id
        in: path
        name: tokenId
        required: true
        type: integer
      - description: nonce
        in: path
        name: nonce
        required: true
        type: integer
      - description: amount
        in: path
        name: amount
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Cancels offer for an NFT - tx template.
      tags:
      - tx-template
  /tx-template/change-owner/{userAddress}/{contractAddress}:
    get:
      consumes:
      - application/json
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: string
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets tx-template for change owner of NFT contract.
      tags:
      - tx-template
  /tx-template/deploy-template/{userAddress}/{tokenId}/{royalties}/{tokenNameBase}/{imageExt}/{price}/{maxSupply}/{saleStart}:
    get:
      consumes:
      - application/json
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: string
      - description: token id
        in: path
        name: tokenId
        required: true
        type: string
      - description: royalties
        in: path
        name: royalties
        required: true
        type: number
      - description: tokenNameBase
        in: path
        name: tokenNameBase
        required: true
        type: string
      - description: imageBase
        in: path
        name: imageBase
        required: true
        type: string
      - description: imageExt
        in: path
        name: imageExt
        required: true
        type: string
      - description: price
        in: path
        name: price
        required: true
        type: number
      - description: maxSupply
        in: path
        name: maxSupply
        required: true
        type: integer
      - description: saleStart
        in: path
        name: saleStart
        required: true
        type: integer
      - description: metadataBase
        in: path
        name: metadataBase
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets tx-template for deploy NFT template contract.
      tags:
      - tx-template
  /tx-template/deposit/{userAddress}/{amount}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for deposit transaction.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: amount
        in: path
        name: amount
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
      summary: Deposit EGLD template.
      tags:
      - tx-template
  /tx-template/end-auction/{userAddress}/{tokenId}/{nonce}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for end auction transaction.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: token id
        in: path
        name: tokenId
        required: true
        type: integer
      - description: nonce
        in: path
        name: nonce
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: End auction for an NFT - tx template.
      tags:
      - tx-template
  /tx-template/issue-nft/{userAddress}/{tokenName}/{tokenTicker}:
    get:
      consumes:
      - application/json
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: string
      - description: token name
        in: path
        name: tokenName
        required: true
        type: string
      - description: token ticker
        in: path
        name: tokenTicker
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
      summary: Gets tx-template for issue NFT tokens.
      tags:
      - tx-template
  /tx-template/list-nft/{userAddress}/{tokenId}/{nonce}/{price}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for NFT list. Only account nonce and signature
        must be added afterwards.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: token id
        in: path
        name: tokenId
        required: true
        type: integer
      - description: nonce
        in: path
        name: nonce
        required: true
        type: integer
      - description: price
        in: path
        name: price
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets tx-template for NFT list.
      tags:
      - tx-template
  /tx-template/make-offer/{userAddress}/{tokenId}/{nonce}/{amount}/{expire}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for make offer transaction.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: token id
        in: path
        name: tokenId
        required: true
        type: integer
      - description: nonce
        in: path
        name: nonce
        required: true
        type: integer
      - description: amount
        in: path
        name: amount
        required: true
        type: number
      - description: nonce
        in: path
        name: expire
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Make offer for an NFT - tx template.
      tags:
      - tx-template
  /tx-template/mint-tokens/{userAddress}/{tokenId}/{numberOfTokens}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for mint tokens. Only account nonce and signature
        must be added afterwards.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: collection id
        in: path
        name: collectionId
        required: true
        type: string
      - description: number of tokens
        in: path
        name: numberOfTokens
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets tx-template for mint tokens.
      tags:
      - tx-template
  /tx-template/place-bid/{userAddress}/{tokenId}/{nonce}/{payment}/{bidAmount}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for place bid transaction.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: token id
        in: path
        name: tokenId
        required: true
        type: integer
      - description: nonce
        in: path
        name: nonce
        required: true
        type: integer
      - description: payment
        in: path
        name: payment
        required: true
        type: number
      - description: bidAmount
        in: path
        name: bidAmount
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Start auction for an NFT - tx template.
      tags:
      - tx-template
  /tx-template/request-withdraw/{userAddress}/{contractAddress}:
    get:
      consumes:
      - application/json
      description: The destination will be the Minter Address. Minter will request
        withdrawal from Marketplace.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: string
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets tx-template for request withdraw through Minter.
      tags:
      - tx-template
  /tx-template/set-roles/{userAddress}/{tokenId}/{contractAddress}:
    get:
      consumes:
      - application/json
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: string
      - description: token name
        in: path
        name: tokenName
        required: true
        type: string
      - description: token ticker
        in: path
        name: tokenTicker
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets tx-template for change set special roles for NFT contract.
      tags:
      - tx-template
  /tx-template/start-auction/{userAddress}/{tokenId}/{nonce}/{minBid}/{startTime}/{deadline}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for start auction transaction.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: token id
        in: path
        name: tokenId
        required: true
        type: integer
      - description: nonce
        in: path
        name: nonce
        required: true
        type: integer
      - description: minBid
        in: path
        name: minBid
        required: true
        type: number
      - description: nonce
        in: path
        name: startTime
        required: true
        type: integer
      - description: nonce
        in: path
        name: deadline
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Start auction for an NFT - tx template.
      tags:
      - tx-template
  /tx-template/withdraw-creator-royalties/{userAddress}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for withdraw creator royalties transaction.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
      summary: Withdraw Creator Royalties EGLD template.
      tags:
      - tx-template
  /tx-template/withdraw-minter/{userAddress}/{contractAddress}:
    get:
      consumes:
      - application/json
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: string
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
      summary: Gets tx-template for withdraw from Minter SC.
      tags:
      - tx-template
  /tx-template/withdraw-nft/{userAddress}/{tokenId}/{nonce}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for NFT withdraw. Only account nonce and
        signature must be added afterwards.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      - description: token id
        in: path
        name: tokenId
        required: true
        type: integer
      - description: nonce
        in: path
        name: nonce
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ApiResponse'
      summary: Gets tx-template for NFT withdraw.
      tags:
      - tx-template
  /tx-template/withdraw/{userAddress}/{amount}:
    get:
      consumes:
      - application/json
      description: Retrieves tx-template for withdraw transaction.
      parameters:
      - description: user address
        in: path
        name: userAddress
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/formatter.Transaction'
      summary: Withdraw EGLD template.
      tags:
      - tx-template
swagger: "2.0"
